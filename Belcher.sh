#!/bin/bash
if [ ! "$BUILD" ] ;
then
  # IF YOU PUT THIS SOMEWHERE ODD... YOU'LL NEED TO DEFINE THE PATH TO THE BUILD FOLDER
  # BUILD='the/path/to/build'

  #LOOKING FOR IT THOUGH...
  THIS_SCRIPT_ROOT="$(dirname $(readlink -f $0))"
  [[ -d "$THIS_SCRIPT_ROOT/build" ]] && BUILD="$THIS_SCRIPT_ROOT/build"
  [[ -d "$THIS_SCRIPT_ROOT/../build" ]] && BUILD=$(readlink -f "$THIS_SCRIPT_ROOT/../build")
  [[ "$(echo $THIS_SCRIPT_ROOT | rev | cut -f1 -d/ | rev)" == "build" ]] && BUILD="$THIS_SCRIPT_ROOT"
  [[ "$(echo $(dirname THIS_SCRIPT_ROOT) | rev | cut -f1 -d/ | rev)" == "build" ]] && BUILD="$(dirname $THIS_SCRIPT_ROOT)"
  [[ "$(echo $(dirname THIS_SCRIPT_ROOT) | rev | cut -f1 -d/ | rev)" == "build" ]] && BUILD="$(dirname $THIS_SCRIPT_ROOT)"

  unset THIS_SCRIPT_ROOT
fi
###################################################################
if [ -z "$APPMAIN" ] ;
then
  APPMAIN="SERVER_CONFIG"
  . "$BUILD/build-env.sh" EXECUTE
elif [ -z "$__RUNTIME__" ] ;
then
        echo "Runtime not loaded... I'VE FAILED!"
        exit 1
fi
[[ "$APPMAIN" == "SERVER_CONFIG" ]] && . "$BUILD/just-a-banner.sh" WELCOME

[[ -z "$SOURCE" ]] &&  echo "Source undefined... " && exit 1
if [ -z "$DB_ROOT_PASSWORD" ]; then
	echo -e "\nIF YOU SEE THIS, SOMETHING IS NOT RIGHT...\n"
	echo "Enter password for MySQL:"
	read DB_ROOT_PASSWORD
fi

CFGTAG="####>>>> GENERATED BY: BeyondEarthRP FiveM Config & DB Manager"
CFG_FILE="SERVER.DATA"

declare -a configs
OUT_CFG="$SOURCE/server.cfg.header"
CONFIG=0

# PRE-CLEANING FOR THE REBUILD
if [ -d "$SOURCE/configs" ]; then
    rm -rf "$SOURCE/configs"
fi
if [ -f "$SOURCE/server.cfg" ]; then
    rm -f "$SOURCE/server.cfg"
fi
if [ -f "$SOURCE/server.cfg.header" ]; then
    rm -f "$SOURCE/server.cfg.header"
fi

mkdir "$SOURCE/configs"
touch "$SOURCE/server.cfg"
cd "$SOURCE"


while read -r line <&3; do
    if [ ! -z "$line" ]; then
        CONF_TYPE=$(echo "$line" | cut -f1 -d:)
        DATA=$(echo "$line" | rev | cut -f1 -d: | rev)

        if [ "$CONF_TYPE" == "CONFIG" ]; then
            echo "$DATA" >> "$OUT_CFG"
            echo "$DATA" >> "$OUT_CFG"
            if [ "$OUT_CFG" != "$SOURCE/server.cfg.header" ]; then
                CONFIG="1"
            fi
        elif [ "$CONF_TYPE" == "MYSQL" ]; then
            FILE="${DATA/<RESOURCES>/$SOURCE}"

            #nano $FILE   #<- to edit the files first
            echo "$FILE"
            mysql -u root -p"$DB_ROOT_PASSWORD" essentialmode < "$FILE"

        elif [ "$CONF_TYPE" == "HEADER" ]; then
            # EXAMPLE:
            # HEADER:HEADER INFORMATION%FILE

            if [ "$CONFIG" != 0 ]; then
                # CLOSING OUT PREVIOUS CONFIG
                echo "" >> "$OUT_CFG"
                echo "$CFGTAG" >> "$OUT_CFG"
            else
                if [ "$OUT_CFG" != "$SOURCE/server.cfg.header" ]; then
                    rm "$OUT_CFG"
                fi
            fi

            # STARTING A NEW CONFIG
            HEADER_INFO=$(echo "$DATA" | cut -f1 -d%)
            HEADER_FILE=$(echo "$DATA" | rev | cut -f1 -d% | rev)
            OUT_CFG="$SOURCE/configs/$HEADER_FILE.cfg"
            OUT_CFG_ENTRY="configs/$HEADER_FILE.cfg"
            CONFIG=0

            touch "$OUT_CFG"
            configs+=("$OUT_CFG_ENTRY")

            echo "#######################################" > "$OUT_CFG"
            echo "# $HEADER_INFO" >> "$OUT_CFG"
            echo "#######################################" >> "$OUT_CFG"
        elif [ "$CONF_TYPE" == "######" ]; then #SUBHEADER
            # EXAMPLE:
            # SUBHEADER:PUT YOUR HEADER HERE

            echo "" >> "$OUT_CFG"
            echo "#||||||||||||||||||||||||||||||||||||||" >> "$OUT_CFG"
            echo "#|> $DATA" >> "$OUT_CFG"
            echo "#||||||||||||||||||||||||||||||||||||||" >> "$OUT_CFG"
        fi
    else
        echo ""
    fi
    echo ""
done 3< <(cat "$SOURCE/SERVER.DATA")
if [ "$CONFIG" != 0 ]; then
    # CLOSING OUT PREVIOUS CONFIG
    echo "" >> "$OUT_CFG"
    echo "$CFGTAG" >> "$OUT_CFG"
else
    rm "$OUT_CFG"
fi

timestamp="$(date +%s)"
echo "#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" > "$SOURCE/server.cfg"
echo "#> BEYOND EARTH ROLEPLAY" >> "$SOURCE/server.cfg"
echo "#> $timestamp" >> "$SOURCE/server.cfg"
echo "#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" >> "$SOURCE/server.cfg"
echo "" >> "$SOURCE/server.cfg"
cat "$SOURCE/server.cfg.network" >> "$SOURCE/server.cfg"
if [ -f "$SOURCE/server.cfg.header" ]; then
    echo "writing the top of the config:"
    echo "    cat $SOURCE/server.cfg.header >> $SOURCE/server.cfg "
    cat "$SOURCE/server.cfg.header" >> "$SOURCE/server.cfg"
    echo "removing remnants..."
    echo "    rm $SOURCE/server.cfg.header"
    rm "$SOURCE/server.cfg.header"

fi
echo "" >> "$SOURCE/server.cfg"
echo "#######################################" >> "$SOURCE/server.cfg"
echo "# EXTERNAL CONFIGURATION FILES" >> "$SOURCE/server.cfg"
echo "#######################################" >> "$SOURCE/server.cfg"
for serverCfg in "${configs[@]}"
do
    echo "writing config line:"
    echo "    exec $serverCfg >> $SOURCE/server.cfg"
    echo "exec $serverCfg" >> "$SOURCE/server.cfg"
    echo ""
done
echo "done with nested configs."
echo ""
echo "writing footer config..."
echo "    cat $SOURCE/server.cfg.footer >> $SOURCE/server.cfg"
cat "$SOURCE/server.cfg.footer" >> "$SOURCE/server.cfg"
echo ""
echo "Finished."
